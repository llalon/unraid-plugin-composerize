!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.composerize=e()}(this,function(){"use strict";function t(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function e(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var i="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function o(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function s(t,e){return t(e={exports:{}},e.exports),e.exports}var a=s(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),u=s(function(t){var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)}),c=(u.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),l=function(t){if(!c(t))throw TypeError(t+" is not an object!");return t},f=function(t){try{return!!t()}catch(t){return!0}},h=!f(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),p=a.document,g=c(p)&&c(p.createElement),y=!h&&!f(function(){return 7!=Object.defineProperty((t="div",g?p.createElement(t):{}),"a",{get:function(){return 7}}).a;var t}),d=Object.defineProperty,E={f:h?Object.defineProperty:function(t,e,n){if(l(t),e=function(t,e){if(!c(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!c(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!c(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!c(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}(e,!0),l(n),y)try{return d(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},v=h?function(t,e,n){return E.f(t,e,function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}(1,n))}:function(t,e,n){return t[e]=n,t},m={}.hasOwnProperty,A=function(t,e){return m.call(t,e)},b=0,w=Math.random(),_=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++b+w).toString(36))},T=s(function(t){var e=a["__core-js_shared__"]||(a["__core-js_shared__"]={});(t.exports=function(t,n){return e[t]||(e[t]=void 0!==n?n:{})})("versions",[]).push({version:u.version,mode:"global",copyright:"Â© 2020 Denis Pushkarev (zloirock.ru)"})}),R=T("native-function-to-string",Function.toString),S=s(function(t){var e=_("src"),n=(""+R).split("toString");u.inspectSource=function(t){return R.call(t)},(t.exports=function(t,r,i,o){var s="function"==typeof i;s&&(A(i,"name")||v(i,"name",r)),t[r]!==i&&(s&&(A(i,e)||v(i,e,t[r]?""+t[r]:n.join(String(r)))),t===a?t[r]=i:o?t[r]?t[r]=i:v(t,r,i):(delete t[r],v(t,r,i)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[e]||R.call(this)})}),L=function(t,e,n){if(function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!")}(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},N=function(t,e,n){var r,i,o,s,c=t&N.F,l=t&N.G,f=t&N.S,h=t&N.P,p=t&N.B,g=l?a:f?a[e]||(a[e]={}):(a[e]||{}).prototype,y=l?u:u[e]||(u[e]={}),d=y.prototype||(y.prototype={});for(r in l&&(n=e),n)o=((i=!c&&g&&void 0!==g[r])?g:n)[r],s=p&&i?L(o,a):h&&"function"==typeof o?L(Function.call,o):o,g&&S(g,r,o,t&N.U),y[r]!=o&&v(y,r,s),h&&d[r]!=o&&(d[r]=o)};a.core=u,N.F=1,N.G=2,N.S=4,N.P=8,N.B=16,N.W=32,N.U=64,N.R=128;var C,I,O,x=N,P={}.toString,M=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==function(t){return P.call(t).slice(8,-1)}(t)?t.split(""):Object(t)},D=function(t){return M(function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}(t))},j=Math.ceil,U=Math.floor,k=function(t){return isNaN(t=+t)?0:(t>0?U:j)(t)},B=Math.min,Y=Math.max,G=Math.min,z=T("keys"),F=(C=!1,function(t,e,n){var r,i,o=D(t),s=(r=o.length)>0?B(k(r),9007199254740991):0,a=function(t,e){return(t=k(t))<0?Y(t+e,0):G(t,e)}(n,s);if(C&&e!=e){for(;s>a;)if((i=o[a++])!=i)return!0}else for(;s>a;a++)if((C||a in o)&&o[a]===e)return C||a||0;return!C&&-1}),X=z[I="IE_PROTO"]||(z[I]=_(I)),H="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),$=Object.keys||function(t){return function(t,e){var n,r=D(t),i=0,o=[];for(n in r)n!=X&&A(r,n)&&o.push(n);for(;e.length>i;)A(r,n=e[i++])&&(~F(o,n)||o.push(n));return o}(t,H)},Q={f:{}.propertyIsEnumerable}.f,V=(O=!0,function(t){for(var e,n=D(t),r=$(n),i=r.length,o=0,s=[];i>o;)e=r[o++],h&&!Q.call(n,e)||s.push(O?[e,n[e]]:n[e]);return s});x(x.S,"Object",{entries:function(t){return V(t)}});u.Object.entries;var q,Z=function(){function t(t,e){var n,r,i,o,s,a,u,c,l;for(null==e&&(e=""),i="",s=t.length,a=null,r=0,o=0;o<s;){if("\\"===(n=t.charAt(o)))i+=t.slice(o,+(o+1)+1||9e9),o++;else if("("===n)if(o<s-2)if("(?:"===(c=t.slice(o,+(o+2)+1||9e9)))o+=2,i+=c;else if("(?<"===c)for(r++,o+=2,u="";o+1<s;){if(">"===(l=t.charAt(o+1))){i+="(",o++,u.length>0&&(null==a&&(a={}),a[u]=r);break}u+=l,o++}else i+=n,r++;else i+=n;else i+=n;o++}this.rawRegex=t,this.cleanedRegex=i,this.regex=new RegExp(this.cleanedRegex,"g"+e.replace("g","")),this.mapping=a}return t.prototype.regex=null,t.prototype.rawRegex=null,t.prototype.cleanedRegex=null,t.prototype.mapping=null,t.prototype.exec=function(t){var e,n,r,i;if(this.regex.lastIndex=0,null==(n=this.regex.exec(t)))return null;if(null!=this.mapping)for(r in i=this.mapping)e=i[r],n[r]=n[e];return n},t.prototype.test=function(t){return this.regex.lastIndex=0,this.regex.test(t)},t.prototype.replace=function(t,e){return this.regex.lastIndex=0,t.replace(this.regex,e)},t.prototype.replaceAll=function(t,e,n){var r;for(null==n&&(n=0),this.regex.lastIndex=0,r=0;this.regex.test(t)&&(0===n||r<n);)this.regex.lastIndex=0,t=t.replace(this.regex,e),r++;return[t,r]},t}(),J={}.hasOwnProperty;q=Z;var K,W,tt=function(){function t(){}return t.REGEX_LEFT_TRIM_BY_CHAR={},t.REGEX_RIGHT_TRIM_BY_CHAR={},t.REGEX_SPACES=/\s+/g,t.REGEX_DIGITS=/^\d+$/,t.REGEX_OCTAL=/[^0-7]/gi,t.REGEX_HEXADECIMAL=/[^a-f0-9]/gi,t.PATTERN_DATE=new q("^(?<year>[0-9][0-9][0-9][0-9])-(?<month>[0-9][0-9]?)-(?<day>[0-9][0-9]?)(?:(?:[Tt]|[ \t]+)(?<hour>[0-9][0-9]?):(?<minute>[0-9][0-9]):(?<second>[0-9][0-9])(?:.(?<fraction>[0-9]*))?(?:[ \t]*(?<tz>Z|(?<tz_sign>[-+])(?<tz_hour>[0-9][0-9]?)(?::(?<tz_minute>[0-9][0-9]))?))?)?$","i"),t.LOCAL_TIMEZONE_OFFSET=60*(new Date).getTimezoneOffset()*1e3,t.trim=function(t,e){var n,r;return null==e&&(e="\\s"),null==(n=this.REGEX_LEFT_TRIM_BY_CHAR[e])&&(this.REGEX_LEFT_TRIM_BY_CHAR[e]=n=new RegExp("^"+e+e+"*")),n.lastIndex=0,null==(r=this.REGEX_RIGHT_TRIM_BY_CHAR[e])&&(this.REGEX_RIGHT_TRIM_BY_CHAR[e]=r=new RegExp(e+""+e+"*$")),r.lastIndex=0,t.replace(n,"").replace(r,"")},t.ltrim=function(t,e){var n;return null==e&&(e="\\s"),null==(n=this.REGEX_LEFT_TRIM_BY_CHAR[e])&&(this.REGEX_LEFT_TRIM_BY_CHAR[e]=n=new RegExp("^"+e+e+"*")),n.lastIndex=0,t.replace(n,"")},t.rtrim=function(t,e){var n;return null==e&&(e="\\s"),null==(n=this.REGEX_RIGHT_TRIM_BY_CHAR[e])&&(this.REGEX_RIGHT_TRIM_BY_CHAR[e]=n=new RegExp(e+""+e+"*$")),n.lastIndex=0,t.replace(n,"")},t.isEmpty=function(t){return!t||""===t||"0"===t||t instanceof Array&&0===t.length||this.isEmptyObject(t)},t.isEmptyObject=function(t){var e;return t instanceof Object&&0===function(){var n;for(e in n=[],t)J.call(t,e)&&n.push(e);return n}().length},t.subStrCount=function(t,e,n,r){var i,o,s,a,u,c;for(i=0,t=""+t,e=""+e,null!=n&&(t=t.slice(n)),null!=r&&(t=t.slice(0,r)),a=t.length,c=e.length,o=s=0,u=a;0<=u?s<u:s>u;o=0<=u?++s:--s)e===t.slice(o,c)&&(i++,o+=c-1);return i},t.isDigits=function(t){return this.REGEX_DIGITS.lastIndex=0,this.REGEX_DIGITS.test(t)},t.octDec=function(t){return this.REGEX_OCTAL.lastIndex=0,parseInt((t+"").replace(this.REGEX_OCTAL,""),8)},t.hexDec=function(t){return this.REGEX_HEXADECIMAL.lastIndex=0,"0x"===((t=this.trim(t))+"").slice(0,2)&&(t=(t+"").slice(2)),parseInt((t+"").replace(this.REGEX_HEXADECIMAL,""),16)},t.utf8chr=function(t){var e;return e=String.fromCharCode,128>(t%=2097152)?e(t):2048>t?e(192|t>>6)+e(128|63&t):65536>t?e(224|t>>12)+e(128|t>>6&63)+e(128|63&t):e(240|t>>18)+e(128|t>>12&63)+e(128|t>>6&63)+e(128|63&t)},t.parseBoolean=function(t,e){var n;return null==e&&(e=!0),"string"==typeof t?(n=t.toLowerCase(),!(!e&&"no"===n)&&("0"!==n&&("false"!==n&&""!==n))):!!t},t.isNumeric=function(t){return this.REGEX_SPACES.lastIndex=0,"number"==typeof t||"string"==typeof t&&!isNaN(t)&&""!==t.replace(this.REGEX_SPACES,"")},t.stringToDate=function(t){var e,n,r,i,o,s,a,u,c,l;if(!(null!=t?t.length:void 0))return null;if(!(o=this.PATTERN_DATE.exec(t)))return null;if(l=parseInt(o.year,10),a=parseInt(o.month,10)-1,n=parseInt(o.day,10),null==o.hour)return e=new Date(Date.UTC(l,a,n));if(i=parseInt(o.hour,10),s=parseInt(o.minute,10),u=parseInt(o.second,10),null!=o.fraction){for(r=o.fraction.slice(0,3);r.length<3;)r+="0";r=parseInt(r,10)}else r=0;return null!=o.tz&&(c=6e4*(60*parseInt(o.tz_hour,10)+(null!=o.tz_minute?parseInt(o.tz_minute,10):0)),"-"===o.tz_sign&&(c*=-1)),e=new Date(Date.UTC(l,a,n,i,s,u,r)),c&&e.setTime(e.getTime()-c),e},t.strRepeat=function(t,e){var n,r;for(r="",n=0;n<e;)r+=t,n++;return r},t.getStringFromFile=function(t,e){var n,r,i,s,a,u,c;if(null==e&&(e=null),c=null,"undefined"!=typeof window&&null!==window)if(window.XMLHttpRequest)c=new XMLHttpRequest;else if(window.ActiveXObject)for(i=0,s=(u=["Msxml2.XMLHTTP.6.0","Msxml2.XMLHTTP.3.0","Msxml2.XMLHTTP","Microsoft.XMLHTTP"]).length;i<s;i++){a=u[i];try{c=new ActiveXObject(a)}catch(t){}}return null!=c?null!=e?(c.onreadystatechange=function(){if(4===c.readyState)return 200===c.status||0===c.status?e(c.responseText):e(null)},c.open("GET",t,!0),c.send(null)):(c.open("GET",t,!1),c.send(null),200===c.status||0===c.status?c.responseText:null):(r=o("fs"),null!=e?r.readFile(t,function(t,n){return e(t?null:String(n))}):null!=(n=r.readFileSync(t))?String(n):null)},t}();W=tt,K=Z;var et,nt=function(){function t(){}return t.PATTERN_ESCAPED_CHARACTER=new K('\\\\([0abt\tnvfre "\\/\\\\N_LP]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'),t.unescapeSingleQuotedString=function(t){return t.replace(/\'\'/g,"'")},t.unescapeDoubleQuotedString=function(t){var e;return null==this._unescapeCallback&&(this._unescapeCallback=(e=this,function(t){return e.unescapeCharacter(t)})),this.PATTERN_ESCAPED_CHARACTER.replace(t,this._unescapeCallback)},t.unescapeCharacter=function(t){var e;switch(e=String.fromCharCode,t.charAt(1)){case"0":return e(0);case"a":return e(7);case"b":return e(8);case"t":case"\t":return"\t";case"n":return"\n";case"v":return e(11);case"f":return e(12);case"r":return e(13);case"e":return e(27);case" ":return" ";case'"':return'"';case"/":return"/";case"\\":return"\\";case"N":return e(133);case"_":return e(160);case"L":return e(8232);case"P":return e(8233);case"x":return W.utf8chr(W.hexDec(t.substr(2,2)));case"u":return W.utf8chr(W.hexDec(t.substr(2,4)));case"U":return W.utf8chr(W.hexDec(t.substr(2,8)));default:return""}},t}();et=Z;var rt=function(){var t;function e(){}return e.LIST_ESCAPEES=["\\","\\\\",'\\"','"',"\0","","","","","","","","\b","\t","\n","\v","\f","\r","","","","","","","","","","","","","","","","","","",(t=String.fromCharCode)(133),t(160),t(8232),t(8233)],e.LIST_ESCAPED=["\\\\",'\\"','\\"','\\"',"\\0","\\x01","\\x02","\\x03","\\x04","\\x05","\\x06","\\a","\\b","\\t","\\n","\\v","\\f","\\r","\\x0e","\\x0f","\\x10","\\x11","\\x12","\\x13","\\x14","\\x15","\\x16","\\x17","\\x18","\\x19","\\x1a","\\e","\\x1c","\\x1d","\\x1e","\\x1f","\\N","\\_","\\L","\\P"],e.MAPPING_ESCAPEES_TO_ESCAPED=function(){var t,n,r,i;for(r={},t=n=0,i=e.LIST_ESCAPEES.length;0<=i?n<i:n>i;t=0<=i?++n:--n)r[e.LIST_ESCAPEES[t]]=e.LIST_ESCAPED[t];return r}(),e.PATTERN_CHARACTERS_TO_ESCAPE=new et("[\\x00-\\x1f]|ÃÂ|ÃÂ |Ã¢ÂÂ¨|Ã¢ÂÂ©"),e.PATTERN_MAPPING_ESCAPEES=new et(e.LIST_ESCAPEES.join("|").split("\\").join("\\\\")),e.PATTERN_SINGLE_QUOTING=new et("[\\s'\":{}[\\],&*#?]|^[-?|<>=!%@`]"),e.requiresDoubleQuoting=function(t){return this.PATTERN_CHARACTERS_TO_ESCAPE.test(t)},e.escapeWithDoubleQuotes=function(t){var e;return'"'+this.PATTERN_MAPPING_ESCAPEES.replace(t,(e=this,function(t){return e.MAPPING_ESCAPEES_TO_ESCAPED[t]}))+'"'},e.requiresSingleQuoting=function(t){return this.PATTERN_SINGLE_QUOTING.test(t)},e.escapeWithSingleQuotes=function(t){return"'"+t.replace(/'/g,"''")+"'"},e}(),it={}.hasOwnProperty,ot=function(t){function e(t,e,n){this.message=t,this.parsedLine=e,this.snippet=n}return function(t,e){for(var n in e)it.call(e,n)&&(t[n]=e[n]);function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype}(e,Error),e.prototype.toString=function(){return null!=this.parsedLine&&null!=this.snippet?"<ParseException> "+this.message+" (line "+this.parsedLine+": '"+this.snippet+"')":"<ParseException> "+this.message},e}(),st={}.hasOwnProperty,at=function(t){function e(t,e,n){this.message=t,this.parsedLine=e,this.snippet=n}return function(t,e){for(var n in e)st.call(e,n)&&(t[n]=e[n]);function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype}(e,Error),e.prototype.toString=function(){return null!=this.parsedLine&&null!=this.snippet?"<ParseMore> "+this.message+" (line "+this.parsedLine+": '"+this.snippet+"')":"<ParseMore> "+this.message},e}(),ut={}.hasOwnProperty;(function(t){function e(t,e,n){this.message=t,this.parsedLine=e,this.snippet=n}(function(t,e){for(var n in e)ut.call(e,n)&&(t[n]=e[n]);function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype})(e,Error),e.prototype.toString=function(){return null!=this.parsedLine&&null!=this.snippet?"<DumpException> "+this.message+" (line "+this.parsedLine+": '"+this.snippet+"')":"<DumpException> "+this.message}})();var ct,lt,ft,ht,pt,gt,yt=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1};ht=Z,pt=nt,ct=rt,gt=tt,lt=ot,ft=at;var dt,Et,vt,mt,At,bt=function(){function t(){}return t.REGEX_QUOTED_STRING="(?:\"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|'(?:[^']*(?:''[^']*)*)')",t.PATTERN_TRAILING_COMMENTS=new ht("^\\s*#.*$"),t.PATTERN_QUOTED_SCALAR=new ht("^"+t.REGEX_QUOTED_STRING),t.PATTERN_THOUSAND_NUMERIC_SCALAR=new ht("^(-|\\+)?[0-9,]+(\\.[0-9]+)?$"),t.PATTERN_SCALAR_BY_DELIMITERS={},t.settings={},t.configure=function(t,e){null==t&&(t=null),null==e&&(e=null),this.settings.exceptionOnInvalidType=t,this.settings.objectDecoder=e},t.parse=function(t,e,n){var r,i;if(null==e&&(e=!1),null==n&&(n=null),this.settings.exceptionOnInvalidType=e,this.settings.objectDecoder=n,null==t)return"";if(0===(t=gt.trim(t)).length)return"";switch(r={exceptionOnInvalidType:e,objectDecoder:n,i:0},t.charAt(0)){case"[":i=this.parseSequence(t,r),++r.i;break;case"{":i=this.parseMapping(t,r),++r.i;break;default:i=this.parseScalar(t,null,['"',"'"],r)}if(""!==this.PATTERN_TRAILING_COMMENTS.replace(t.slice(r.i),""))throw new lt('Unexpected characters near "'+t.slice(r.i)+'".');return i},t.dump=function(t,e,n){var r,i,o;return null==e&&(e=!1),null==n&&(n=null),null==t?"null":"object"===(o=typeof t)?t instanceof Date?t.toISOString():null==n||"string"!=typeof(i=n(t))&&null==i?this.dumpObject(t):i:"boolean"===o?t?"true":"false":gt.isDigits(t)?"string"===o?"'"+t+"'":String(parseInt(t)):gt.isNumeric(t)?"string"===o?"'"+t+"'":String(parseFloat(t)):"number"===o?Infinity===t?".Inf":-Infinity===t?"-.Inf":isNaN(t)?".NaN":t:ct.requiresDoubleQuoting(t)?ct.escapeWithDoubleQuotes(t):ct.requiresSingleQuoting(t)?ct.escapeWithSingleQuotes(t):""===t?'""':gt.PATTERN_DATE.test(t)?"'"+t+"'":"null"===(r=t.toLowerCase())||"~"===r||"true"===r||"false"===r?"'"+t+"'":t},t.dumpObject=function(t,e,n){var r,i,o,s,a;if(null==n&&(n=null),t instanceof Array){for(s=[],r=0,o=t.length;r<o;r++)a=t[r],s.push(this.dump(a));return"["+s.join(", ")+"]"}for(i in s=[],t)a=t[i],s.push(this.dump(i)+": "+this.dump(a));return"{"+s.join(", ")+"}"},t.parseScalar=function(t,e,n,r,i){var o,s,a,u,c,l,f,h;if(null==e&&(e=null),null==n&&(n=['"',"'"]),null==r&&(r=null),null==i&&(i=!0),null==r&&(r={exceptionOnInvalidType:this.settings.exceptionOnInvalidType,objectDecoder:this.settings.objectDecoder,i:0}),o=r.i,l=t.charAt(o),yt.call(n,l)>=0){if(u=this.parseQuotedScalar(t,r),o=r.i,null!=e&&(f=gt.ltrim(t.slice(o)," ").charAt(0),!(yt.call(e,f)>=0)))throw new lt("Unexpected characters ("+t.slice(o)+").")}else{if(e){if(s=e.join("|"),null==(c=this.PATTERN_SCALAR_BY_DELIMITERS[s])&&(c=new ht("^(.+?)("+s+")"),this.PATTERN_SCALAR_BY_DELIMITERS[s]=c),!(a=c.exec(t.slice(o))))throw new lt("Malformed inline YAML string ("+t+").");o+=(u=a[1]).length}else o+=(u=t.slice(o)).length,-1!==(h=u.indexOf(" #"))&&(u=gt.rtrim(u.slice(0,h)));i&&(u=this.evaluateScalar(u,r))}return r.i=o,u},t.parseQuotedScalar=function(t,e){var n,r,i;if(n=e.i,!(r=this.PATTERN_QUOTED_SCALAR.exec(t.slice(n))))throw new ft("Malformed inline YAML string ("+t.slice(n)+").");return i=r[0].substr(1,r[0].length-2),i='"'===t.charAt(n)?pt.unescapeDoubleQuotedString(i):pt.unescapeSingleQuotedString(i),n+=r[0].length,e.i=n,i},t.parseSequence=function(t,e){var n,r,i,o,s,a;for(o=[],i=t.length,n=e.i,n+=1;n<i;){switch(e.i=n,t.charAt(n)){case"[":o.push(this.parseSequence(t,e)),n=e.i;break;case"{":o.push(this.parseMapping(t,e)),n=e.i;break;case"]":return o;case",":case" ":case"\n":break;default:if(r='"'===(s=t.charAt(n))||"'"===s,a=this.parseScalar(t,[",","]"],['"',"'"],e),n=e.i,!r&&"string"==typeof a&&(-1!==a.indexOf(": ")||-1!==a.indexOf(":\n")))try{a=this.parseMapping("{"+a+"}")}catch(t){}o.push(a),--n}++n}throw new ft("Malformed inline YAML string "+t)},t.parseMapping=function(t,e){var n,r,i,o,s,a,u;for(s={},o=t.length,r=e.i,r+=1,a=!1;r<o;){switch(e.i=r,t.charAt(r)){case" ":case",":case"\n":++r,e.i=r,a=!0;break;case"}":return s}if(a)a=!1;else for(i=this.parseScalar(t,[":"," ","\n"],['"',"'"],e,!1),r=e.i,n=!1;r<o;){switch(e.i=r,t.charAt(r)){case"[":u=this.parseSequence(t,e),r=e.i,void 0===s[i]&&(s[i]=u),n=!0;break;case"{":u=this.parseMapping(t,e),r=e.i,void 0===s[i]&&(s[i]=u),n=!0;break;case":":case" ":case"\n":break;default:u=this.parseScalar(t,[",","}"],['"',"'"],e),r=e.i,void 0===s[i]&&(s[i]=u),n=!0,--r}if(++r,n)break}}throw new ft("Malformed inline YAML string "+t)},t.evaluateScalar=function(t,e){var n,r,i,o,s,a,u,c,l;switch(u=(t=gt.trim(t)).toLowerCase()){case"null":case"":case"~":return null;case"true":return!0;case"false":return!1;case".inf":return Infinity;case".nan":return NaN;case"-.inf":return Infinity;default:switch(u.charAt(0)){case"!":switch(-1===(o=t.indexOf(" "))?u:u.slice(0,o)){case"!":return-1!==o?parseInt(this.parseScalar(t.slice(2))):null;case"!str":return gt.ltrim(t.slice(4));case"!!str":return gt.ltrim(t.slice(5));case"!!int":return parseInt(this.parseScalar(t.slice(5)));case"!!bool":return gt.parseBoolean(this.parseScalar(t.slice(6)),!1);case"!!float":return parseFloat(this.parseScalar(t.slice(7)));case"!!timestamp":return gt.stringToDate(gt.ltrim(t.slice(11)));default:if(null==e&&(e={exceptionOnInvalidType:this.settings.exceptionOnInvalidType,objectDecoder:this.settings.objectDecoder,i:0}),s=e.objectDecoder,i=e.exceptionOnInvalidType,s)return-1===(o=(l=gt.rtrim(t)).indexOf(" "))?s(l,null):((c=gt.ltrim(l.slice(o+1))).length>0||(c=null),s(l.slice(0,o),c));if(i)throw new lt("Custom object support when parsing a YAML file has been disabled.");return null}break;case"0":return"0x"===t.slice(0,2)?gt.hexDec(t):gt.isDigits(t)?gt.octDec(t):gt.isNumeric(t)?parseFloat(t):t;case"+":return gt.isDigits(t)?(a=t,n=parseInt(a),a===String(n)?n:a):gt.isNumeric(t)?parseFloat(t):this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(t)?parseFloat(t.replace(",","")):t;case"-":return gt.isDigits(t.slice(1))?"0"===t.charAt(1)?-gt.octDec(t.slice(1)):(a=t.slice(1),n=parseInt(a),a===String(n)?-n:-a):gt.isNumeric(t)?parseFloat(t):this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(t)?parseFloat(t.replace(",","")):t;default:return(r=gt.stringToDate(t))?r:gt.isNumeric(t)?parseFloat(t):this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(t)?parseFloat(t.replace(",","")):t}}},t}();dt=bt,mt=Z,At=tt,Et=ot,vt=at;var wt,_t,Tt,Rt,St,Lt,Nt,Ct=function(){function t(t){this.offset=null!=t?t:0,this.lines=[],this.currentLineNb=-1,this.currentLine="",this.refs={}}return t.prototype.PATTERN_FOLDED_SCALAR_ALL=new mt("^(?:(?<type>![^\\|>]*)\\s+)?(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$"),t.prototype.PATTERN_FOLDED_SCALAR_END=new mt("(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$"),t.prototype.PATTERN_SEQUENCE_ITEM=new mt("^\\-((?<leadspaces>\\s+)(?<value>.+?))?\\s*$"),t.prototype.PATTERN_ANCHOR_VALUE=new mt("^&(?<ref>[^ ]+) *(?<value>.*)"),t.prototype.PATTERN_COMPACT_NOTATION=new mt("^(?<key>"+dt.REGEX_QUOTED_STRING+"|[^ '\"\\{\\[].*?) *\\:(\\s+(?<value>.+?))?\\s*$"),t.prototype.PATTERN_MAPPING_ITEM=new mt("^(?<key>"+dt.REGEX_QUOTED_STRING+"|[^ '\"\\[\\{].*?) *\\:(\\s+(?<value>.+?))?\\s*$"),t.prototype.PATTERN_DECIMAL=new mt("\\d+"),t.prototype.PATTERN_INDENT_SPACES=new mt("^ +"),t.prototype.PATTERN_TRAILING_LINES=new mt("(\n*)$"),t.prototype.PATTERN_YAML_HEADER=new mt("^\\%YAML[: ][\\d\\.]+.*\n","m"),t.prototype.PATTERN_LEADING_COMMENTS=new mt("^(\\#.*?\n)+","m"),t.prototype.PATTERN_DOCUMENT_MARKER_START=new mt("^\\-\\-\\-.*?\n","m"),t.prototype.PATTERN_DOCUMENT_MARKER_END=new mt("^\\.\\.\\.\\s*$","m"),t.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION={},t.prototype.CONTEXT_NONE=0,t.prototype.CONTEXT_SEQUENCE=1,t.prototype.CONTEXT_MAPPING=2,t.prototype.parse=function(e,n,r){var i,o,s,a,u,c,l,f,h,p,g,y,d,E,v,m,A,b,w,_,T,R,S,L,N,C,I,O,x,P,M,D,j,U,k;for(null==n&&(n=!1),null==r&&(r=null),this.currentLineNb=-1,this.currentLine="",this.lines=this.cleanup(e).split("\n"),u=null,a=this.CONTEXT_NONE,o=!1;this.moveToNextLine();)if(!this.isCurrentLineEmpty()){if("\t"===this.currentLine[0])throw new Et("A YAML file cannot contain tabs as indentation.",this.getRealCurrentLineNb()+1,this.currentLine);if(p=S=!1,k=this.PATTERN_SEQUENCE_ITEM.exec(this.currentLine)){if(this.CONTEXT_MAPPING===a)throw new Et("You cannot define a sequence item when in a mapping");a=this.CONTEXT_SEQUENCE,null==u&&(u=[]),null!=k.value&&(R=this.PATTERN_ANCHOR_VALUE.exec(k.value))&&(p=R.ref,k.value=R.value),null==k.value||""===At.trim(k.value," ")||0===At.ltrim(k.value," ").indexOf("#")?this.currentLineNb<this.lines.length-1&&!this.isNextLineUnIndentedCollection()?((O=new t(this.getRealCurrentLineNb()+1)).refs=this.refs,u.push(O.parse(this.getNextEmbedBlock(null,!0),n,r))):u.push(null):(null!=(x=k.leadspaces)?x.length:void 0)&&(R=this.PATTERN_COMPACT_NOTATION.exec(k.value))?((O=new t(this.getRealCurrentLineNb())).refs=this.refs,s=k.value,h=this.getCurrentLineIndentation(),this.isNextLineIndented(!1)&&(s+="\n"+this.getNextEmbedBlock(h+k.leadspaces.length+1,!0)),u.push(O.parse(s,n,r))):u.push(this.parseValue(k.value,n,r))}else{if(!(k=this.PATTERN_MAPPING_ITEM.exec(this.currentLine))||-1!==k.key.indexOf(" #")){if(1===(_=this.lines.length)||2===_&&At.isEmpty(this.lines[1])){try{e=dt.parse(this.lines[0],n,r)}catch(t){throw(c=t).parsedLine=this.getRealCurrentLineNb()+1,c.snippet=this.currentLine,c}if("object"==typeof e){if(e instanceof Array)l=e[0];else for(d in e){l=e[d];break}if("string"==typeof l&&0===l.indexOf("*")){for(u=[],L=0,w=e.length;L<w;L++)i=e[L],u.push(this.refs[i.slice(1)]);e=u}}return e}if("["===(M=At.ltrim(e).charAt(0))||"{"===M)try{return dt.parse(e,n,r)}catch(t){throw(c=t).parsedLine=this.getRealCurrentLineNb()+1,c.snippet=this.currentLine,c}throw new Et("Unable to parse.",this.getRealCurrentLineNb()+1,this.currentLine)}if(this.CONTEXT_SEQUENCE===a)throw new Et("You cannot define a mapping item when in a sequence");a=this.CONTEXT_MAPPING,null==u&&(u={}),dt.configure(n,r);try{d=dt.parseScalar(k.key)}catch(t){throw(c=t).parsedLine=this.getRealCurrentLineNb()+1,c.snippet=this.currentLine,c}if("<<"===d)if(S=!0,o=!0,0===(null!=(P=k.value)?P.indexOf("*"):void 0)){if(D=k.value.slice(1),null==this.refs[D])throw new Et('Reference "'+D+'" does not exist.',this.getRealCurrentLineNb()+1,this.currentLine);if("object"!=typeof(j=this.refs[D]))throw new Et("YAML merge keys used with a scalar value instead of an object.",this.getRealCurrentLineNb()+1,this.currentLine);if(j instanceof Array)for(f=g=0,m=j.length;g<m;f=++g)e=j[f],null==u[N=String(f)]&&(u[N]=e);else for(d in j)e=j[d],null==u[d]&&(u[d]=e)}else{if(e=null!=k.value&&""!==k.value?k.value:this.getNextEmbedBlock(),(O=new t(this.getRealCurrentLineNb()+1)).refs=this.refs,"object"!=typeof(C=O.parse(e,n)))throw new Et("YAML merge keys used with a scalar value instead of an object.",this.getRealCurrentLineNb()+1,this.currentLine);if(C instanceof Array)for(E=0,A=C.length;E<A;E++){if("object"!=typeof(I=C[E]))throw new Et("Merge items must be objects.",this.getRealCurrentLineNb()+1,I);if(I instanceof Array)for(f=T=0,b=I.length;T<b;f=++T)e=I[f],y=String(f),u.hasOwnProperty(y)||(u[y]=e);else for(d in I)e=I[d],u.hasOwnProperty(d)||(u[d]=e)}else for(d in C)e=C[d],u.hasOwnProperty(d)||(u[d]=e)}else null!=k.value&&(R=this.PATTERN_ANCHOR_VALUE.exec(k.value))&&(p=R.ref,k.value=R.value);S||(null==k.value||""===At.trim(k.value," ")||0===At.ltrim(k.value," ").indexOf("#")?this.isNextLineIndented()||this.isNextLineUnIndentedCollection()?((O=new t(this.getRealCurrentLineNb()+1)).refs=this.refs,U=O.parse(this.getNextEmbedBlock(),n,r),(o||void 0===u[d])&&(u[d]=U)):(o||void 0===u[d])&&(u[d]=null):(U=this.parseValue(k.value,n,r),(o||void 0===u[d])&&(u[d]=U)))}if(p)if(u instanceof Array)this.refs[p]=u[u.length-1];else{for(d in v=null,u)v=d;this.refs[p]=u[v]}}return At.isEmpty(u)?null:u},t.prototype.getRealCurrentLineNb=function(){return this.currentLineNb+this.offset},t.prototype.getCurrentLineIndentation=function(){return this.currentLine.length-At.ltrim(this.currentLine," ").length},t.prototype.getNextEmbedBlock=function(t,e){var n,r,i,o,s,a,u;if(null==t&&(t=null),null==e&&(e=!1),this.moveToNextLine(),null==t){if(o=this.getCurrentLineIndentation(),u=this.isStringUnIndentedCollectionItem(this.currentLine),!this.isCurrentLineEmpty()&&0===o&&!u)throw new Et("Indentation problem.",this.getRealCurrentLineNb()+1,this.currentLine)}else o=t;for(n=[this.currentLine.slice(o)],e||(i=this.isStringUnIndentedCollectionItem(this.currentLine)),s=!(a=this.PATTERN_FOLDED_SCALAR_END).test(this.currentLine);this.moveToNextLine();)if((r=this.getCurrentLineIndentation())===o&&(s=!a.test(this.currentLine)),!s||!this.isCurrentLineComment())if(this.isCurrentLineBlank())n.push(this.currentLine.slice(o));else{if(i&&!this.isStringUnIndentedCollectionItem(this.currentLine)&&r===o){this.moveToPreviousLine();break}if(r>=o)n.push(this.currentLine.slice(o));else if("#"!==At.ltrim(this.currentLine).charAt(0)){if(0===r){this.moveToPreviousLine();break}throw new Et("Indentation problem.",this.getRealCurrentLineNb()+1,this.currentLine)}}return n.join("\n")},t.prototype.moveToNextLine=function(){return!(this.currentLineNb>=this.lines.length-1)&&(this.currentLine=this.lines[++this.currentLineNb],!0)},t.prototype.moveToPreviousLine=function(){this.currentLine=this.lines[--this.currentLineNb]},t.prototype.parseValue=function(t,e,n){var r,i,o,s,a,u,c,l;if(0===t.indexOf("*")){if(t=-1!==(a=t.indexOf("#"))?t.substr(1,a-2):t.slice(1),void 0===this.refs[t])throw new Et('Reference "'+t+'" does not exist.',this.currentLine);return this.refs[t]}if(o=this.PATTERN_FOLDED_SCALAR_ALL.exec(t))return s=null!=(u=o.modifiers)?u:"",i=Math.abs(parseInt(s)),isNaN(i)&&(i=0),l=this.parseFoldedScalar(o.separator,this.PATTERN_DECIMAL.replace(s,""),i),null!=o.type?(dt.configure(e,n),dt.parseScalar(o.type+" "+l)):l;if("["!==(c=t.charAt(0))&&"{"!==c&&'"'!==c&&"'"!==c)return this.isNextLineIndented()&&(t+="\n"+this.getNextEmbedBlock()),dt.parse(t,e,n);for(;;)try{return dt.parse(t,e,n)}catch(e){if(!((r=e)instanceof vt&&this.moveToNextLine()))throw r.parsedLine=this.getRealCurrentLineNb()+1,r.snippet=this.currentLine,r;t+="\n"+At.trim(this.currentLine," ")}},t.prototype.parseFoldedScalar=function(e,n,r){var i,o,s,a,u,c,l,f,h,p;if(null==n&&(n=""),null==r&&(r=0),!(l=this.moveToNextLine()))return"";for(i=this.isCurrentLineBlank(),p="";l&&i;)(l=this.moveToNextLine())&&(p+="\n",i=this.isCurrentLineBlank());if(0===r&&(u=this.PATTERN_INDENT_SPACES.exec(this.currentLine))&&(r=u[0].length),r>0)for(null==(f=this.PATTERN_FOLDED_SCALAR_BY_INDENTATION[r])&&(f=new mt("^ {"+r+"}(.*)$"),t.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION[r]=f);l&&(i||(u=f.exec(this.currentLine)));)p+=i?this.currentLine.slice(r):u[1],(l=this.moveToNextLine())&&(p+="\n",i=this.isCurrentLineBlank());else l&&(p+="\n");if(l&&this.moveToPreviousLine(),">"===e){for(c="",o=0,s=(h=p.split("\n")).length;o<s;o++)0===(a=h[o]).length||" "===a.charAt(0)?c=At.rtrim(c," ")+a+"\n":c+=a+" ";p=c}return"+"!==n&&(p=At.rtrim(p)),""===n?p=this.PATTERN_TRAILING_LINES.replace(p,"\n"):"-"===n&&(p=this.PATTERN_TRAILING_LINES.replace(p,"")),p},t.prototype.isNextLineIndented=function(t){var e,n,r;if(null==t&&(t=!0),n=this.getCurrentLineIndentation(),e=!this.moveToNextLine(),t)for(;!e&&this.isCurrentLineEmpty();)e=!this.moveToNextLine();else for(;!e&&this.isCurrentLineBlank();)e=!this.moveToNextLine();return!e&&(r=!1,this.getCurrentLineIndentation()>n&&(r=!0),this.moveToPreviousLine(),r)},t.prototype.isCurrentLineEmpty=function(){var t;return 0===(t=At.trim(this.currentLine," ")).length||"#"===t.charAt(0)},t.prototype.isCurrentLineBlank=function(){return""===At.trim(this.currentLine," ")},t.prototype.isCurrentLineComment=function(){return"#"===At.ltrim(this.currentLine," ").charAt(0)},t.prototype.cleanup=function(t){var e,n,r,i,o,s,a,u,c,l,f,h,p,g;for(-1!==t.indexOf("\r")&&(t=t.split("\r\n").join("\n").split("\r").join("\n")),e=0,t=(l=this.PATTERN_YAML_HEADER.replaceAll(t,""))[0],e=l[1],this.offset+=e,g=(f=this.PATTERN_LEADING_COMMENTS.replaceAll(t,"",1))[0],1===(e=f[1])&&(this.offset+=At.subStrCount(t,"\n")-At.subStrCount(g,"\n"),t=g),g=(h=this.PATTERN_DOCUMENT_MARKER_START.replaceAll(t,"",1))[0],1===(e=h[1])&&(this.offset+=At.subStrCount(t,"\n")-At.subStrCount(g,"\n"),t=g,t=this.PATTERN_DOCUMENT_MARKER_END.replace(t,"")),p=-1,i=0,s=(c=t.split("\n")).length;i<s;i++)u=c[i],0!==At.trim(u," ").length&&(r=u.length-At.ltrim(u).length,(-1===p||r<p)&&(p=r));if(p>0){for(n=o=0,a=c.length;o<a;n=++o)u=c[n],c[n]=u.slice(p);t=c.join("\n")}return t},t.prototype.isNextLineUnIndentedCollection=function(t){var e,n;for(null==t&&(t=null),null==t&&(t=this.getCurrentLineIndentation()),e=this.moveToNextLine();e&&this.isCurrentLineEmpty();)e=this.moveToNextLine();return!1!==e&&(n=!1,this.getCurrentLineIndentation()===t&&this.isStringUnIndentedCollectionItem(this.currentLine)&&(n=!0),this.moveToPreviousLine(),n)},t.prototype.isStringUnIndentedCollectionItem=function(){return"-"===this.currentLine||"- "===this.currentLine.slice(0,2)},t}();Tt=tt,_t=bt,wt=function(){function t(){}return t.indentation=4,t.prototype.dump=function(t,e,n,r,i){var o,s,a,u,c,l,f;if(null==e&&(e=0),null==n&&(n=0),null==r&&(r=!1),null==i&&(i=null),u="",c=n?Tt.strRepeat(" ",n):"",e<=0||"object"!=typeof t||t instanceof Date||Tt.isEmpty(t))u+=c+_t.dump(t,r,i);else if(t instanceof Array)for(o=0,a=t.length;o<a;o++)l=t[o],u+=c+"-"+((f=e-1<=0||"object"!=typeof l||Tt.isEmpty(l))?" ":"\n")+this.dump(l,e-1,f?0:n+this.indentation,r,i)+(f?"\n":"");else for(s in t)l=t[s],f=e-1<=0||"object"!=typeof l||Tt.isEmpty(l),u+=c+_t.dump(s,r,i)+":"+(f?" ":"\n")+this.dump(l,e-1,f?0:n+this.indentation,r,i)+(f?"\n":"");return u},t}(),St=Ct,Rt=wt,Lt=tt,Nt=function(){function t(){}return t.parse=function(t,e,n){return null==e&&(e=!1),null==n&&(n=null),(new St).parse(t,e,n)},t.parseFile=function(t,e,n,r){var i,o;return null==e&&(e=null),null==n&&(n=!1),null==r&&(r=null),null!=e?Lt.getStringFromFile(t,(o=this,function(t){var i;i=null,null!=t&&(i=o.parse(t,n,r)),e(i)})):null!=(i=Lt.getStringFromFile(t))?this.parse(i,n,r):null},t.dump=function(t,e,n,r,i){var o;return null==e&&(e=2),null==n&&(n=4),null==r&&(r=!1),null==i&&(i=null),(o=new Rt).indentation=n,o.dump(t,e,0,r,i)},t.stringify=function(t,e,n,r,i){return this.dump(t,e,n,r,i)},t.load=function(t,e,n,r){return this.parseFile(t,e,n,r)},t}(),"undefined"!=typeof window&&null!==window&&(window.YAML=Nt),"undefined"!=typeof window&&null!==window||(i.YAML=Nt);var It=Nt,Ot="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function xt(){throw new Error("setTimeout has not been defined")}function Pt(){throw new Error("clearTimeout has not been defined")}var Mt=xt,Dt=Pt;function jt(t){if(Mt===setTimeout)return setTimeout(t,0);if((Mt===xt||!Mt)&&setTimeout)return Mt=setTimeout,setTimeout(t,0);try{return Mt(t,0)}catch(e){try{return Mt.call(null,t,0)}catch(e){return Mt.call(this,t,0)}}}"function"==typeof Ot.setTimeout&&(Mt=setTimeout),"function"==typeof Ot.clearTimeout&&(Dt=clearTimeout);var Ut,kt=[],Bt=!1,Yt=-1;function Gt(){Bt&&Ut&&(Bt=!1,Ut.length?kt=Ut.concat(kt):Yt=-1,kt.length&&zt())}function zt(){if(!Bt){var t=jt(Gt);Bt=!0;for(var e=kt.length;e;){for(Ut=kt,kt=[];++Yt<e;)Ut&&Ut[Yt].run();Yt=-1,e=kt.length}Ut=null,Bt=!1,function(t){if(Dt===clearTimeout)return clearTimeout(t);if((Dt===Pt||!Dt)&&clearTimeout)return Dt=clearTimeout,clearTimeout(t);try{Dt(t)}catch(e){try{return Dt.call(null,t)}catch(e){return Dt.call(this,t)}}}(t)}}function Ft(t,e){this.fun=t,this.array=e}Ft.prototype.run=function(){this.fun.apply(null,this.array)};function Xt(){}var Ht=Xt,$t=Xt,Qt=Xt,Vt=Xt,qt=Xt,Zt=Xt,Jt=Xt;var Kt=Ot.performance||{},Wt=Kt.now||Kt.mozNow||Kt.msNow||Kt.oNow||Kt.webkitNow||function(){return(new Date).getTime()};var te=new Date;var ee={nextTick:function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];kt.push(new Ft(t,e)),1!==kt.length||Bt||jt(zt)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:Ht,addListener:$t,once:Qt,off:Vt,removeListener:qt,removeAllListeners:Zt,emit:Jt,binding:function(t){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(t){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(t){var e=.001*Wt.call(Kt),n=Math.floor(e),r=Math.floor(e%1*1e9);return t&&(n-=t[0],(r-=t[1])<0&&(n--,r+=1e9)),[n,r]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-te)/1e3}};const ne=(t,e)=>{if("string"!=typeof t&&!Array.isArray(t))throw new TypeError("Expected the input to be `string | string[]`");e=Object.assign({pascalCase:!1},e);return 0===(t=Array.isArray(t)?t.map(t=>t.trim()).filter(t=>t.length).join("-"):t.trim()).length?"":1===t.length?e.pascalCase?t.toUpperCase():t.toLowerCase():(t!==t.toLowerCase()&&(t=(t=>{let e=!1,n=!1,r=!1;for(let i=0;i<t.length;i++){const o=t[i];e&&/[a-zA-Z]/.test(o)&&o.toUpperCase()===o?(t=t.slice(0,i)+"-"+t.slice(i),e=!1,r=n,n=!0,i++):n&&r&&/[a-zA-Z]/.test(o)&&o.toLowerCase()===o?(t=t.slice(0,i-1)+"-"+t.slice(i-1),r=n,n=!1,e=!0):(e=o.toLowerCase()===o&&o.toUpperCase()!==o,r=n,n=o.toUpperCase()===o&&o.toLowerCase()!==o)}return t})(t)),(t=>e.pascalCase?t.charAt(0).toUpperCase()+t.slice(1):t)(t=t.replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(t,e)=>e.toUpperCase()).replace(/\d+(\w|$)/g,t=>t.toUpperCase())))};var re=ne,ie=ne;re.default=ie;var oe=function(t,e){if("string"!=typeof t)throw new TypeError("Expected a string");return e=void 0===e?"_":e,t.replace(/([a-z\d])([A-Z])/g,"$1"+e+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+e+"$2").toLowerCase()};function se(t,e){for(var n=0,r=t.length-1;r>=0;r--){var i=t[r];"."===i?t.splice(r,1):".."===i?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}var ae=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,ue=function(t){return ae.exec(t).slice(1)};function ce(){for(var t="",e=!1,n=arguments.length-1;n>=-1&&!e;n--){var r=n>=0?arguments[n]:"/";if("string"!=typeof r)throw new TypeError("Arguments to path.resolve must be strings");r&&(t=r+"/"+t,e="/"===r.charAt(0))}return t=se(pe(t.split("/"),function(t){return!!t}),!e).join("/"),(e?"/":"")+t||"."}function le(t){var e=fe(t),n="/"===ge(t,-1);return(t=se(pe(t.split("/"),function(t){return!!t}),!e).join("/"))||e||(t="."),t&&n&&(t+="/"),(e?"/":"")+t}function fe(t){return"/"===t.charAt(0)}var he={extname:function(t){return ue(t)[3]},basename:function(t,e){var n=ue(t)[2];return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n},dirname:function(t){var e=ue(t),n=e[0],r=e[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},sep:"/",delimiter:":",relative:function(t,e){function n(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=ce(t).substr(1),e=ce(e).substr(1);for(var r=n(t.split("/")),i=n(e.split("/")),o=Math.min(r.length,i.length),s=o,a=0;a<o;a++)if(r[a]!==i[a]){s=a;break}var u=[];for(a=s;a<r.length;a++)u.push("..");return(u=u.concat(i.slice(s))).join("/")},join:function(){return le(pe(Array.prototype.slice.call(arguments,0),function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t}).join("/"))},isAbsolute:fe,normalize:le,resolve:ce};function pe(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}var ge="b"==="ab".substr(-1)?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)},ye=function(t){if(Array.isArray(t))return t;t=t.trim();for(var e=0,n=null,r=null,i=null,o=[],s=0;s<t.length;s++)n=r," "!==(r=t.charAt(s))||i?r!==i?"'"!==r&&'"'!==r||i?(o[e]||(o[e]=""),o[e]+=r):i=r:(o[e]||(o[e]=""),i=null):" "!==n&&e++;return o},de=[],Ee=[],ve="undefined"!=typeof Uint8Array?Uint8Array:Array,me=!1;function Ae(){me=!0;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0,n=t.length;e<n;++e)de[e]=t[e],Ee[t.charCodeAt(e)]=e;Ee["-".charCodeAt(0)]=62,Ee["_".charCodeAt(0)]=63}function be(t,e,n){for(var r,i,o=[],s=e;s<n;s+=3)r=(t[s]<<16)+(t[s+1]<<8)+t[s+2],o.push(de[(i=r)>>18&63]+de[i>>12&63]+de[i>>6&63]+de[63&i]);return o.join("")}function we(t){var e;me||Ae();for(var n=t.length,r=n%3,i="",o=[],s=0,a=n-r;s<a;s+=16383)o.push(be(t,s,s+16383>a?a:s+16383));return 1===r?(e=t[n-1],i+=de[e>>2],i+=de[e<<4&63],i+="=="):2===r&&(e=(t[n-2]<<8)+t[n-1],i+=de[e>>10],i+=de[e>>4&63],i+=de[e<<2&63],i+="="),o.push(i),o.join("")}function _e(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,c=u>>1,l=-7,f=n?i-1:0,h=n?-1:1,p=t[e+f];for(f+=h,o=p&(1<<-l)-1,p>>=-l,l+=a;l>0;o=256*o+t[e+f],f+=h,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=r;l>0;s=256*s+t[e+f],f+=h,l-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),o-=c}return(p?-1:1)*s*Math.pow(2,o-r)}function Te(t,e,n,r,i,o){var s,a,u,c=8*o-i-1,l=(1<<c)-1,f=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,g=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=l?(a=0,s=l):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+p]=255&a,p+=g,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[n+p]=255&s,p+=g,s/=256,c-=8);t[n+p-g]|=128*y}var Re={}.toString,Se=Array.isArray||function(t){return"[object Array]"==Re.call(t)};function Le(){return Ce.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Ne(t,e){if(Le()<e)throw new RangeError("Invalid typed array length");return Ce.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=Ce.prototype:(null===t&&(t=new Ce(e)),t.length=e),t}function Ce(t,e,n){if(!(Ce.TYPED_ARRAY_SUPPORT||this instanceof Ce))return new Ce(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return xe(this,t)}return Ie(this,t,e,n)}function Ie(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);Ce.TYPED_ARRAY_SUPPORT?(t=e).__proto__=Ce.prototype:t=Pe(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!Ce.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|je(e,n),i=(t=Ne(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(De(e)){var n=0|Me(e.length);return 0===(t=Ne(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?Ne(t,0):Pe(t,e);if("Buffer"===e.type&&Se(e.data))return Pe(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function Oe(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function xe(t,e){if(Oe(e),t=Ne(t,e<0?0:0|Me(e)),!Ce.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function Pe(t,e){var n=e.length<0?0:0|Me(e.length);t=Ne(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function Me(t){if(t>=Le())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Le().toString(16)+" bytes");return 0|t}function De(t){return!(null==t||!t._isBuffer)}function je(t,e){if(De(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return cn(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return ln(t).length;default:if(r)return cn(t).length;e=(""+e).toLowerCase(),r=!0}}function Ue(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function ke(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=Ce.from(e,r)),De(e))return 0===e.length?-1:Be(t,e,n,r,i);if("number"==typeof e)return e&=255,Ce.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):Be(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function Be(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var l=-1;for(o=n;o<a;o++)if(c(t,o)===c(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var f=!0,h=0;h<u;h++)if(c(t,o+h)!==c(e,h)){f=!1;break}if(f)return o}return-1}function Ye(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function Ge(t,e,n,r){return fn(cn(e,t.length-n),t,n,r)}function ze(t,e,n,r){return fn(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function Fe(t,e,n,r){return ze(t,e,n,r)}function Xe(t,e,n,r){return fn(ln(e),t,n,r)}function He(t,e,n,r){return fn(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function $e(t,e,n){return 0===e&&n===t.length?we(t):we(t.slice(e,n))}function Qe(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(l=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=f}return function(t){var e=t.length;if(e<=Ve)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=Ve));return n}(r)}Ce.TYPED_ARRAY_SUPPORT=void 0===Ot.TYPED_ARRAY_SUPPORT||Ot.TYPED_ARRAY_SUPPORT,Ce.poolSize=8192,Ce._augment=function(t){return t.__proto__=Ce.prototype,t},Ce.from=function(t,e,n){return Ie(null,t,e,n)},Ce.TYPED_ARRAY_SUPPORT&&(Ce.prototype.__proto__=Uint8Array.prototype,Ce.__proto__=Uint8Array),Ce.alloc=function(t,e,n){return function(t,e,n,r){return Oe(e),e<=0?Ne(t,e):void 0!==n?"string"==typeof r?Ne(t,e).fill(n,r):Ne(t,e).fill(n):Ne(t,e)}(null,t,e,n)},Ce.allocUnsafe=function(t){return xe(null,t)},Ce.allocUnsafeSlow=function(t){return xe(null,t)},Ce.isBuffer=hn,Ce.compare=function(t,e){if(!De(t)||!De(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},Ce.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Ce.concat=function(t,e){if(!Se(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return Ce.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=Ce.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var o=t[n];if(!De(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},Ce.byteLength=je,Ce.prototype._isBuffer=!0,Ce.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)Ue(this,e,e+1);return this},Ce.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)Ue(this,e,e+3),Ue(this,e+1,e+2);return this},Ce.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)Ue(this,e,e+7),Ue(this,e+1,e+6),Ue(this,e+2,e+5),Ue(this,e+3,e+4);return this},Ce.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?Qe(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return Je(this,e,n);case"utf8":case"utf-8":return Qe(this,e,n);case"ascii":return qe(this,e,n);case"latin1":case"binary":return Ze(this,e,n);case"base64":return $e(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Ke(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},Ce.prototype.equals=function(t){if(!De(t))throw new TypeError("Argument must be a Buffer");return this===t||0===Ce.compare(this,t)},Ce.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},Ce.prototype.compare=function(t,e,n,r,i){if(!De(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,s=n-e,a=Math.min(o,s),u=this.slice(r,i),c=t.slice(e,n),l=0;l<a;++l)if(u[l]!==c[l]){o=u[l],s=c[l];break}return o<s?-1:s<o?1:0},Ce.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},Ce.prototype.indexOf=function(t,e,n){return ke(this,t,e,n,!0)},Ce.prototype.lastIndexOf=function(t,e,n){return ke(this,t,e,n,!1)},Ce.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return Ye(this,t,e,n);case"utf8":case"utf-8":return Ge(this,t,e,n);case"ascii":return ze(this,t,e,n);case"latin1":case"binary":return Fe(this,t,e,n);case"base64":return Xe(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return He(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},Ce.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Ve=4096;function qe(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function Ze(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function Je(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=un(t[o]);return i}function Ke(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function We(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function tn(t,e,n,r,i,o){if(!De(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function en(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function nn(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function rn(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function on(t,e,n,r,i){return i||rn(t,0,n,4),Te(t,e,n,r,23,4),n+4}function sn(t,e,n,r,i){return i||rn(t,0,n,8),Te(t,e,n,r,52,8),n+8}Ce.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),Ce.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=Ce.prototype;else{var i=e-t;n=new Ce(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},Ce.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||We(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},Ce.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||We(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},Ce.prototype.readUInt8=function(t,e){return e||We(t,1,this.length),this[t]},Ce.prototype.readUInt16LE=function(t,e){return e||We(t,2,this.length),this[t]|this[t+1]<<8},Ce.prototype.readUInt16BE=function(t,e){return e||We(t,2,this.length),this[t]<<8|this[t+1]},Ce.prototype.readUInt32LE=function(t,e){return e||We(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Ce.prototype.readUInt32BE=function(t,e){return e||We(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Ce.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||We(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},Ce.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||We(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},Ce.prototype.readInt8=function(t,e){return e||We(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},Ce.prototype.readInt16LE=function(t,e){e||We(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},Ce.prototype.readInt16BE=function(t,e){e||We(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},Ce.prototype.readInt32LE=function(t,e){return e||We(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Ce.prototype.readInt32BE=function(t,e){return e||We(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Ce.prototype.readFloatLE=function(t,e){return e||We(t,4,this.length),_e(this,t,!0,23,4)},Ce.prototype.readFloatBE=function(t,e){return e||We(t,4,this.length),_e(this,t,!1,23,4)},Ce.prototype.readDoubleLE=function(t,e){return e||We(t,8,this.length),_e(this,t,!0,52,8)},Ce.prototype.readDoubleBE=function(t,e){return e||We(t,8,this.length),_e(this,t,!1,52,8)},Ce.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||tn(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},Ce.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||tn(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},Ce.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,1,255,0),Ce.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},Ce.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,2,65535,0),Ce.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):en(this,t,e,!0),e+2},Ce.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,2,65535,0),Ce.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):en(this,t,e,!1),e+2},Ce.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,4,4294967295,0),Ce.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):nn(this,t,e,!0),e+4},Ce.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,4,4294967295,0),Ce.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):nn(this,t,e,!1),e+4},Ce.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);tn(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},Ce.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);tn(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},Ce.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,1,127,-128),Ce.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},Ce.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,2,32767,-32768),Ce.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):en(this,t,e,!0),e+2},Ce.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,2,32767,-32768),Ce.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):en(this,t,e,!1),e+2},Ce.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,4,2147483647,-2147483648),Ce.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):nn(this,t,e,!0),e+4},Ce.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||tn(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),Ce.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):nn(this,t,e,!1),e+4},Ce.prototype.writeFloatLE=function(t,e,n){return on(this,t,e,!0,n)},Ce.prototype.writeFloatBE=function(t,e,n){return on(this,t,e,!1,n)},Ce.prototype.writeDoubleLE=function(t,e,n){return sn(this,t,e,!0,n)},Ce.prototype.writeDoubleBE=function(t,e,n){return sn(this,t,e,!1,n)},Ce.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!Ce.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},Ce.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Ce.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=De(t)?t:cn(new Ce(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var an=/[^+\/0-9A-Za-z-_]/g;function un(t){return t<16?"0"+t.toString(16):t.toString(16)}function cn(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function ln(t){return function(t){var e,n,r,i,o,s;me||Ae();var a=t.length;if(a%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===t[a-2]?2:"="===t[a-1]?1:0,s=new ve(3*a/4-o),r=o>0?a-4:a;var u=0;for(e=0,n=0;e<r;e+=4,n+=3)i=Ee[t.charCodeAt(e)]<<18|Ee[t.charCodeAt(e+1)]<<12|Ee[t.charCodeAt(e+2)]<<6|Ee[t.charCodeAt(e+3)],s[u++]=i>>16&255,s[u++]=i>>8&255,s[u++]=255&i;return 2===o?(i=Ee[t.charCodeAt(e)]<<2|Ee[t.charCodeAt(e+1)]>>4,s[u++]=255&i):1===o&&(i=Ee[t.charCodeAt(e)]<<10|Ee[t.charCodeAt(e+1)]<<4|Ee[t.charCodeAt(e+2)]>>2,s[u++]=i>>8&255,s[u++]=255&i),s}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(an,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function fn(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}function hn(t){return null!=t&&(!!t._isBuffer||pn(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&pn(t.slice(0,0))}(t))}function pn(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}var gn="function"==typeof Object.create?function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t},yn=/%[sdj%]/g;function dn(t){if(!Cn(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(mn(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(t).replace(yn,function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),s=r[n];n<i;s=r[++n])Ln(s)||!xn(s)?o+=" "+s:o+=" "+mn(s);return o}var En,vn={};function mn(t,e){var n={seen:[],stylize:bn};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),Sn(e)?n.showHidden=e:e&&Bn(n,e),In(n.showHidden)&&(n.showHidden=!1),In(n.depth)&&(n.depth=2),In(n.colors)&&(n.colors=!1),In(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=An),wn(n,t,n.depth)}function An(t,e){var n=mn.styles[e];return n?"["+mn.colors[n][0]+"m"+t+"["+mn.colors[n][1]+"m":t}function bn(t,e){return t}function wn(t,e,n){if(t.customInspect&&e&&Dn(e.inspect)&&e.inspect!==mn&&(!e.constructor||e.constructor.prototype!==e)){var r=e.inspect(n,t);return Cn(r)||(r=wn(t,r,n)),r}var i=function(t,e){if(In(e))return t.stylize("undefined","undefined");if(Cn(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(Nn(e))return t.stylize(""+e,"number");if(Sn(e))return t.stylize(""+e,"boolean");if(Ln(e))return t.stylize("null","null")}(t,e);if(i)return i;var o=Object.keys(e),s=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(e)),Mn(e)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return _n(e);if(0===o.length){if(Dn(e)){var a=e.name?": "+e.name:"";return t.stylize("[Function"+a+"]","special")}if(On(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(Pn(e))return t.stylize(Date.prototype.toString.call(e),"date");if(Mn(e))return _n(e)}var u,c="",l=!1,f=["{","}"];(Rn(e)&&(l=!0,f=["[","]"]),Dn(e))&&(c=" [Function"+(e.name?": "+e.name:"")+"]");return On(e)&&(c=" "+RegExp.prototype.toString.call(e)),Pn(e)&&(c=" "+Date.prototype.toUTCString.call(e)),Mn(e)&&(c=" "+_n(e)),0!==o.length||l&&0!=e.length?n<0?On(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),u=l?function(t,e,n,r,i){for(var o=[],s=0,a=e.length;s<a;++s)Yn(e,String(s))?o.push(Tn(t,e,n,r,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(Tn(t,e,n,r,i,!0))}),o}(t,e,n,s,o):o.map(function(r){return Tn(t,e,n,s,r,l)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(u,c,f)):f[0]+c+f[1]}function _n(t){return"["+Error.prototype.toString.call(t)+"]"}function Tn(t,e,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(a=t.stylize("[Setter]","special")),Yn(r,i)||(s="["+i+"]"),a||(t.seen.indexOf(u.value)<0?(a=Ln(n)?wn(t,u.value,null):wn(t,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n")):a=t.stylize("[Circular]","special")),In(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function Rn(t){return Array.isArray(t)}function Sn(t){return"boolean"==typeof t}function Ln(t){return null===t}function Nn(t){return"number"==typeof t}function Cn(t){return"string"==typeof t}function In(t){return void 0===t}function On(t){return xn(t)&&"[object RegExp]"===jn(t)}function xn(t){return"object"==typeof t&&null!==t}function Pn(t){return xn(t)&&"[object Date]"===jn(t)}function Mn(t){return xn(t)&&("[object Error]"===jn(t)||t instanceof Error)}function Dn(t){return"function"==typeof t}function jn(t){return Object.prototype.toString.call(t)}function Un(t){return t<10?"0"+t.toString(10):t.toString(10)}mn.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},mn.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var kn=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function Bn(t,e){if(!e||!xn(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}function Yn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var Gn={inherits:gn,_extend:Bn,log:function(){var t,e;console.log("%s - %s",(t=new Date,e=[Un(t.getHours()),Un(t.getMinutes()),Un(t.getSeconds())].join(":"),[t.getDate(),kn[t.getMonth()],e].join(" ")),dn.apply(null,arguments))},isBuffer:function(t){return hn(t)},isPrimitive:function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},isFunction:Dn,isError:Mn,isDate:Pn,isObject:xn,isRegExp:On,isUndefined:In,isSymbol:function(t){return"symbol"==typeof t},isString:Cn,isNumber:Nn,isNullOrUndefined:function(t){return null==t},isNull:Ln,isBoolean:Sn,isArray:Rn,inspect:mn,deprecate:function t(e,n){if(In(Ot.process))return function(){return t(e,n).apply(this,arguments)};if(!0===ee.noDeprecation)return e;var r=!1;return function(){if(!r){if(ee.throwDeprecation)throw new Error(n);ee.traceDeprecation?console.trace(n):console.error(n),r=!0}return e.apply(this,arguments)}},format:dn,debuglog:function(t){In(En)&&(En=ee.env.NODE_DEBUG||""),t=t.toUpperCase(),vn[t]||(new RegExp("\\b"+t+"\\b","i").test(En)?vn[t]=function(){var e=dn.apply(null,arguments);console.error("%s %d: %s",t,0,e)}:vn[t]=function(){});return vn[t]}};function zn(t,e){e||(e={}),t=ye(t);var n=function(t){var e=[],n=!0,r={};Object.keys(t).forEach(function(n){e.push([].concat(t[n],n))});for(;n;){n=!1;for(var i=0;i<e.length;i++)for(var o=i+1;o<e.length;o++){var s=e[i].filter(function(t){return-1!==e[o].indexOf(t)});if(s.length){e[i]=e[i].concat(e[o]),e.splice(o,1),n=!0;break}}}return e.forEach(function(t){t=t.filter(function(t,e,n){return n.indexOf(t)===e}),r[t.pop()]=t}),r}(e.alias||{}),r=function(t,e){var n={};return e=e||{},Object.keys(t).forEach(function(e){n[e]=t[e]}),Object.keys(e).forEach(function(t){n[t]=e[t]}),n}({"short-option-groups":!0,"camel-case-expansion":!0,"dot-notation":!0,"parse-numbers":!0,"boolean-negation":!0,"negation-prefix":"no-","duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"populate--":!1,"combine-arrays":!1,"set-placeholder-key":!1,"halt-at-non-option":!1},e.configuration),i=e.default||{},s=e.configObjects||[],a=e.envPrefix,u=r["populate--"],c=u?"--":"_",l={},f=e.__||function(t){return Gn.format.apply(Gn,Array.prototype.slice.call(arguments))},h=null,p={aliases:{},arrays:{},bools:{},strings:{},numbers:{},counts:{},normalize:{},configs:{},defaulted:{},nargs:{},coercions:{},keys:[]},g=/^-[0-9]+(\.[0-9]+)?/,y=new RegExp("^--"+r["negation-prefix"]+"(.+)");[].concat(e.array).filter(Boolean).forEach(function(t){var e=t.key||t;const n=Object.keys(t).map(function(t){return{boolean:"bools",string:"strings",number:"numbers"}[t]}).filter(Boolean).pop();n&&(p[n][e]=!0),p.arrays[e]=!0,p.keys.push(e)}),[].concat(e.boolean).filter(Boolean).forEach(function(t){p.bools[t]=!0,p.keys.push(t)}),[].concat(e.string).filter(Boolean).forEach(function(t){p.strings[t]=!0,p.keys.push(t)}),[].concat(e.number).filter(Boolean).forEach(function(t){p.numbers[t]=!0,p.keys.push(t)}),[].concat(e.count).filter(Boolean).forEach(function(t){p.counts[t]=!0,p.keys.push(t)}),[].concat(e.normalize).filter(Boolean).forEach(function(t){p.normalize[t]=!0,p.keys.push(t)}),Object.keys(e.narg||{}).forEach(function(t){p.nargs[t]=e.narg[t],p.keys.push(t)}),Object.keys(e.coerce||{}).forEach(function(t){p.coercions[t]=e.coerce[t],p.keys.push(t)}),Array.isArray(e.config)||"string"==typeof e.config?[].concat(e.config).filter(Boolean).forEach(function(t){p.configs[t]=!0}):Object.keys(e.config||{}).forEach(function(t){p.configs[t]=e.config[t]}),function(){Array.prototype.slice.call(arguments).forEach(function(t){Object.keys(t||{}).forEach(function(t){p.aliases[t]||(p.aliases[t]=[].concat(n[t]||[]),p.aliases[t].concat(t).forEach(function(e){if(/-/.test(e)&&r["camel-case-expansion"]){var n=re(e);n!==t&&-1===p.aliases[t].indexOf(n)&&(p.aliases[t].push(n),l[n]=!0)}}),p.aliases[t].concat(t).forEach(function(e){if(e.length>1&&/[A-Z]/.test(e)&&r["camel-case-expansion"]){var n=oe(e,"-");n!==t&&-1===p.aliases[t].indexOf(n)&&(p.aliases[t].push(n),l[n]=!0)}}),p.aliases[t].forEach(function(e){p.aliases[e]=[t].concat(p.aliases[t].filter(function(t){return e!==t}))}))})})}(e.key,n,e.default,p.arrays),Object.keys(i).forEach(function(t){(p.aliases[t]||[]).forEach(function(e){i[e]=i[t]})});var d={_:[]};Object.keys(p.bools).forEach(function(t){Object.prototype.hasOwnProperty.call(i,t)&&(C(t,i[t]),function(t){[].concat(p.aliases[t]||[],t).forEach(function(t){p.defaulted[t]=!0})}(t))});for(var E=[],v=0;v<t.length;v++){var m,A,b,w,_,T,R=t[v];if(R.match(/^--.+=/)||!r["short-option-groups"]&&R.match(/^-.+=/))U((w=R.match(/^--?([^=]+)=([\s\S]*)$/))[1],p.nargs)?(t.splice(v+1,0,w[2]),v=L(v,w[1],t)):U(w[1],p.arrays)&&t.length>v+1?(t.splice(v+1,0,w[2]),v=N(v,w[1],t)):C(w[1],w[2]);else if(R.match(y)&&r["boolean-negation"])C(A=R.match(y)[1],!1);else if(R.match(/^--.+/)||!r["short-option-groups"]&&R.match(/^-.+/))U(A=R.match(/^--?(.+)/)[1],p.nargs)?v=L(v,A,t):U(A,p.arrays)&&t.length>v+1?v=N(v,A,t):void 0===(_=t[v+1])||_.match(/^-/)&&!_.match(g)||U(A,p.bools)||U(A,p.counts)?/^(true|false)$/.test(_)?(C(A,_),v++):C(A,k(B(A,p))):(C(A,_),v++);else if(R.match(/^-.\..+=/))C((w=R.match(/^-([^=]+)=([\s\S]*)$/))[1],w[2]);else if(R.match(/^-.\..+/))_=t[v+1],A=R.match(/^-(.\..+)/)[1],void 0===_||_.match(/^-/)||U(A,p.bools)||U(A,p.counts)?C(A,k(B(A,p))):(C(A,_),v++);else if(R.match(/^-[^-]+/)&&!R.match(g)){b=R.slice(1,-1).split(""),m=!1;for(var S=0;S<b.length;S++){if(_=R.slice(S+2),b[S+1]&&"="===b[S+1]){T=R.slice(S+3),U(A=b[S],p.nargs)?(t.splice(v+1,0,T),v=L(v,A,t)):U(A,p.arrays)&&t.length>v+1?(t.splice(v+1,0,T),v=N(v,A,t)):C(A,T),m=!0;break}if("-"!==_){if(/[A-Za-z]/.test(b[S])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(_)){C(b[S],_),m=!0;break}if(b[S+1]&&b[S+1].match(/\W/)){C(b[S],_),m=!0;break}C(b[S],k(B(b[S],p)))}else C(b[S],_)}A=R.slice(-1)[0],m||"-"===A||(U(A,p.nargs)?v=L(v,A,t):U(A,p.arrays)&&t.length>v+1?v=N(v,A,t):void 0===(_=t[v+1])||/^(-|--)[^-]/.test(_)&&!_.match(g)||U(A,p.bools)||U(A,p.counts)?/^(true|false)$/.test(_)?(C(A,_),v++):C(A,k(B(A,p))):(C(A,_),v++))}else{if("--"===R){E=t.slice(v+1);break}if(r["halt-at-non-option"]){E=t.slice(v);break}d._.push(O("_",R))}}function L(t,e,n){var r;const i=U(e,p.nargs);var o=0;for(r=t+1;r<n.length&&!n[r].match(/^-[^0-9]/);r++)o++;o<i&&(h=Error(f("Not enough arguments following: %s",e)));const s=Math.min(o,i);for(r=t+1;r<s+t+1;r++)C(e,n[r]);return t+s}function N(t,e,n){for(var r=t+1,i=[],o=t>0,s=t+1;s<n.length;s++){if(/^-/.test(n[s])&&!g.test(n[s])){s===r&&C(e,k("array")),o=!0;break}t=s,i.push(n[s])}return o?C(e,i.map(function(t){return I(e,t)})):i.forEach(function(t){C(e,t)}),t}function C(t,e){((function(t){[].concat(p.aliases[t]||[],t).forEach(function(t){delete p.defaulted[t]})})(t),/-/.test(t)&&r["camel-case-expansion"])&&function t(e,n){p.aliases[e]&&p.aliases[e].length||(p.aliases[e]=[n],l[n]=!0);p.aliases[n]&&p.aliases[n].length||t(n,e)}(t,t.split(".").map(function(t){return re(t)}).join("."));var n=I(t,e),i=t.split(".");(j(d,i,n),p.aliases[t]&&p.aliases[t].forEach(function(t){t=t.split("."),j(d,t,n)}),i.length>1&&r["dot-notation"]&&(p.aliases[i[0]]||[]).forEach(function(t){t=t.split(".");var e=[].concat(i);t=t.concat(e),j(d,t,n)}),U(t,p.normalize)&&!U(t,p.arrays))&&[t].concat(p.aliases[t]||[]).forEach(function(t){d.__defineSetter__(t,function(t){e=he.normalize(t)}),d.__defineGetter__(t,function(){return"string"==typeof e?he.normalize(e):e})})}function I(t,e){(U(t,p.bools)||U(t,p.counts))&&"string"==typeof e&&(e="true"===e);var n=O(t,e);return U(t,p.counts)&&(Y(n)||"boolean"==typeof n)&&(n=Fn),U(t,p.normalize)&&U(t,p.arrays)&&(n=Array.isArray(e)?e.map(he.normalize):he.normalize(e)),n}function O(t,e){if(!U(t,p.strings)&&!U(t,p.coercions)){(("number"==typeof(n=e)||!!/^0x[0-9a-f]+$/i.test(n)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(n))&&r["parse-numbers"]&&Number.isSafeInteger(Math.floor(e))||!Y(e)&&U(t,p.numbers))&&(e=Number(e))}var n;return e}function x(t,e){Object.keys(t).forEach(function(n){var i=t[n],o=e?e+"."+n:n;"object"==typeof i&&null!==i&&!Array.isArray(i)&&r["dot-notation"]?x(i,o):(!D(d,o.split("."))||p.defaulted[o]||p.arrays[o]&&r["combine-arrays"])&&C(o,i)})}function P(t,e){if(void 0!==a){var n="string"==typeof a?a:"";Object.keys(ee.env).forEach(function(r){if(""===n||0===r.lastIndexOf(n,0)){var i=r.split("__").map(function(t,e){return 0===e&&(t=t.substring(n.length)),re(t)});!(e&&p.configs[i.join(".")]||!e)||D(t,i)&&!p.defaulted[i.join(".")]||C(i.join("."),ee.env[r])}})}}function M(t,e,n){Object.keys(n).forEach(function(r){D(t,r.split("."))||(j(t,r.split("."),n[r]),(e[r]||[]).forEach(function(e){D(t,e.split("."))||j(t,e.split("."),n[r])}))})}function D(t,e){var n=t;r["dot-notation"]||(e=[e.join(".")]),e.slice(0,-1).forEach(function(t){n=n[t]||{}});var i=e[e.length-1];return"object"==typeof n&&i in n}function j(t,e,n){var i=t;r["dot-notation"]||(e=[e.join(".")]),e.slice(0,-1).forEach(function(t,e){"object"==typeof i&&void 0===i[t]&&(i[t]={}),"object"!=typeof i[t]||Array.isArray(i[t])?(Array.isArray(i[t])?i[t].push({}):i[t]=[i[t],{}],i=i[t][i[t].length-1]):i=i[t]});var o=e[e.length-1],s=U(e.join("."),p.arrays),a=Array.isArray(n),u=r["duplicate-arguments-array"];n===Fn?i[o]=Fn(i[o]):Array.isArray(i[o])?u&&s&&a?i[o]=r["flatten-duplicate-arrays"]?i[o].concat(n):(Array.isArray(i[o][0])?i[o]:[i[o]]).concat([n]):u||Boolean(s)!==Boolean(a)?i[o]=i[o].concat([n]):i[o]=n:void 0===i[o]&&s?i[o]=a?n:[n]:u&&!(void 0===i[o]||U(o,p.bools)||U(e.join("."),p.bools)||U(o,p.counts))?i[o]=[i[o],n]:i[o]=n}function U(t,e){var n=!1;return[].concat(p.aliases[t]||[],t).forEach(function(t){e[t]&&(n=e[t])}),n}function k(t){return{boolean:!0,string:"",number:void 0,array:[]}[t]}function B(t,e){var n="boolean";return U(t,e.strings)?n="string":U(t,e.numbers)?n="number":U(t,e.arrays)&&(n="array"),n}function Y(t){return void 0===t}return P(d,!0),P(d,!1),function(t){var e={};M(e,p.aliases,i),Object.keys(p.configs).forEach(function(n){var r=t[n]||e[n];if(r)try{var i=null,s=he.resolve(ee.cwd(),r);if("function"==typeof p.configs[n]){try{i=p.configs[n](s)}catch(t){i=t}if(i instanceof Error)return void(h=i)}else i=o();x(i)}catch(e){t[n]&&(h=Error(f("Invalid JSON config file: %s",r)))}})}(d),function(){if(void 0===s)return;s.forEach(function(t){x(t)})}(),M(d,p.aliases,i),function(t){var e,n={};Object.keys(t).forEach(function(r){if(!n.hasOwnProperty(r)&&"function"==typeof(e=U(r,p.coercions)))try{var i=e(t[r]);[].concat(p.aliases[r]||[],r).forEach(e=>{n[e]=t[e]=i})}catch(t){h=t}})}(d),r["set-placeholder-key"]&&function(t){p.keys.forEach(e=>{~e.indexOf(".")||void 0===t[e]&&(t[e]=void 0)})}(d),Object.keys(p.counts).forEach(function(t){D(d,t.split("."))||C(t,0)}),u&&E.length&&(d[c]=[]),E.forEach(function(t){d[c].push(t)}),{argv:d,error:h,aliases:p.aliases,newAliases:l,configuration:r}}function Fn(t){return void 0!==t?t+1:1}function Xn(t,e){return zn(t.slice(),e).argv}Xn.detailed=function(t,e){return zn(t.slice(),e)};var Hn=Xn,$n=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===Qn}(t)}(t)};var Qn="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function Vn(t,e){return!1!==e.clone&&e.isMergeableObject(t)?Zn((n=t,Array.isArray(n)?[]:{}),t,e):t;var n}function qn(t,e,n){return t.concat(e).map(function(t){return Vn(t,n)})}function Zn(t,e,n){(n=n||{}).arrayMerge=n.arrayMerge||qn,n.isMergeableObject=n.isMergeableObject||$n;var r=Array.isArray(e);return r===Array.isArray(t)?r?n.arrayMerge(t,e,n):function(t,e,n){var r={};return n.isMergeableObject(t)&&Object.keys(t).forEach(function(e){r[e]=Vn(t[e],n)}),Object.keys(e).forEach(function(i){n.isMergeableObject(e[i])&&t[i]?r[i]=Zn(t[i],e[i],n):r[i]=Vn(e[i],n)}),r}(t,e,n):Vn(e,n)}Zn.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce(function(t,n){return Zn(t,n,e)},{})};var Jn=Zn,Kn=function(t,e,n,r,i,o,s,a){if(!t){var u;if(void 0===e)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,o,s,a],l=0;(u=new Error(e.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}},Wn=function(t,e){return{type:t,path:e}},tr={"add-host":Wn("Array","extra_hosts"),cap_add:Wn("Array","cap_add"),cap_drop:Wn("Array","cap_drop"),cgroup_parent:Wn("Value","cgroup_parent"),device:Wn("Array","devices"),dns:Wn("Array","dns"),dns_search:Wn("Array","dns_search"),env_file:Wn("Array","env_file"),expose:Wn("Array","expose"),hostname:Wn("Value","hostname"),label:Wn("Array","labels"),link:Wn("Array","links"),"log-driver":Wn("Array","logging/driver"),"log-opt":Wn("KeyValue","logging/options"),entrypoint:Wn("Array","entrypoint"),env:Wn("Array","environment"),name:Wn("Value","container_name"),network:Wn("Value","network_mode"),net:Wn("Value","network_mode"),pid:Wn("Value","pid"),privileged:Wn("Switch","privileged"),publish:Wn("Array","ports"),"read-only":Wn("Switch","read_only"),restart:Wn("Value","restart"),tmpfs:Wn("Value","tmpfs"),ulimit:Wn("Ulimits","ulimits"),user:Wn("Value","user"),volume:Wn("Array","volumes")};tr.v=tr.volume,tr.p=tr.publish,tr.e=tr.env,tr.l=tr.label,tr.h=tr.hostname,tr.u=tr.user;var er=function(e,r){var i=tr[e];return i&&("Switch"===i.type||r)?function(e,r){return"KeyValue"===e.type&&"string"==typeof r?{path:e.path,value:t({},r.split("=")[0],r.split("=")[1])}:"Array"===e.type?{path:e.path,value:Array.isArray(r)?r:[String(r)]}:"Switch"===e.type?{path:e.path,value:"true"===r||!0===r}:"Ulimits"===e.type?(Array.isArray(r)?r:[r]).map(function(t){var r=n(String(t).split("="),2),i=r[0],o=r[1];if(Kn(i&&o,"".concat(e.type," must be in the format of: <type>=<soft limit>[:<hard limit>]")),o.includes(":")){var s=n(o.split(":"),2),a=s[0],u=s[1];return Kn(a&&u,"".concat(e.type," must be in the format of: <type>=<soft limit>[:<hard limit>]")),{path:"".concat(e.path,"/").concat(i),value:{soft:parseInt(a,10),hard:parseInt(u,10)}}}return{path:"".concat(e.path,"/").concat(i),value:parseInt(o,10)}}):{path:e.path,value:String(r)}}(i,r):null};return function(r){var i=r.replace(/(\s)+/g," ").trim(),o=Hn(i),s=o._,a=e(o,["_"]);if("docker"!==s[0]||"run"!==s[1]&&"create"!==s[1])throw new SyntaxError("must be a valid docker run/create command");var u={};Object.entries(a).forEach(function(e){var r=n(e,2),i=r[0],o=r[1],s=er(i,o);s&&(Array.isArray(s)?s:[s]).forEach(function(e){var n=function(e){return e.path.split("/").reduceRight(function(e,n){return t({},n,e)},e.value)}(e);u=Jn(u,n)})});var c=s.slice(-1)[0];u.image=c;var l={version:"3.3",services:t({},function(t){var e=t.includes("/")?t.split("/")[1]:t;return e=e.includes(":")?e.split(":")[0]:e}(c),u)};return It.stringify(l,9,4).trim()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
